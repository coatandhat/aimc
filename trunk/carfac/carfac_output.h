//
//  carfac_output.h
//  CARFAC Open Source C++ Library
//
//  Created by Alex Brandmeyer on 5/10/13.
//
// This C++ file is part of an implementation of Lyon's cochlear model:
// "Cascade of Asymmetric Resonators with Fast-Acting Compression"
// to supplement Lyon's upcoming book "Human and Machine Hearing"
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// *****************************************************************************
// Class: CARFACOutput
// *****************************************************************************
// The CARFACOutput object stores an array of EarOuput objects. It is meant as a
// container for the output generated by the CARFAC object's 'Run' and
// 'RunSegment' methods. Depending on the number of audio channels in the  input
// data, the CARFACOutput will have 1 or more EarOutput obects, each of which
// contains a set of two dimensional float arrays (FloatArray2d) representing
// the neural activation patterns (NAPs) generated by the CARFAC model.
//
// The 'InitOutput' method is used to initialize the arrays in each of the
// EarOutput sub-objects once the target data dimensions ears (n_ears), channels
// (n_ch) and timepoints (n_tp) are known.

#ifndef CARFAC_Open_Source_C__Library_carfac_output_h
#define CARFAC_Open_Source_C__Library_carfac_output_h

#include "ear_output.h"

class CARFACOutput {
 public:
  void InitOutput(const int n_ears, const int n_ch,
                  const int32_t n_timepoints);
  void StoreNAPOutput(const int32_t timepoint, const int ear,
                      const FloatArray& nap);
  void StoreBMOutput(const int32_t timepoint, const int ear,
                     const FloatArray& bm);
  void StoreOHCOutput(const int32_t timepoint, const int ear,
                      const FloatArray& ohc);
  void StoreAGCOutput(const int32_t timepoint, const int ear,
                      const FloatArray& agc);

 private:
  int n_ears_;
  std::vector<EarOutput> ears_;
};

#endif